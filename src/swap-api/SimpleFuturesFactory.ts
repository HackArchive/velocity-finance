/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.8
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { SimpleFutures } from "./SimpleFutures";

const bytecode = decompressBytecode("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");

export class SimpleFuturesFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, SimpleFutures.abi, accountOrProvider);
  }

  deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: SimpleFutures.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<SimpleFutures>> {
    const factory = new SimpleFuturesFactory(wallet);
    return factory.deploy(options);
  }
}
