/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.8
  Forc version: 0.64.0
  Fuel-Core version: 0.36.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { TestContract } from "./TestContract";

const bytecode = decompressBytecode("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");

export class TestContractFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, TestContract.abi, accountOrProvider);
  }

  deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: TestContract.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<TestContract>> {
    const factory = new TestContractFactory(wallet);
    return factory.deploy(options);
  }
}
